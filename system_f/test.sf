let func = \X (\c: {None | Some X}. \x: X->(X, X). 
	case c of 
		| None => None of {None | Some (X, X)}
		| Some val => Some (val, val) of {None | Some (X, X)} )
in func [Nat] (Some 10 of {None|Some Nat}) (\x: Nat. (x, x))
;

let poly = \X \x: X. x in 
	let x = poly [Nat] 0 in 
	let y = poly [Bool] false in 
	let z = poly [(Nat, Bool)] in 
	z (x, y)
;

let poly = \X \Y (\func: X->Y. \val: X. func val) in poly [Nat][Bool]
;