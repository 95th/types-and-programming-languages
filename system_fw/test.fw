datatype 'a list = Nil | Cons of 'a * 'a list 
datatype 'a option = None | Some of 'a 
datatype ('a, 'b) either = Left of 'a | Right of 'b 

fun t (Left 10) = 10
  | t (Right _) = 9

fun test (Some _) 9 = 9
  | test (Some 8) 8 = 8
  | test (None) 7 = 0


datatype expr = Var of int | Abs of expr | App of expr * expr;

type env = expr * list 

datatype kont = Mt | Fn of expr * env * kont | Arg of expr * env * kont

fun lookup env i = i

fun extend env x = x

fun step (c: expr) (e: env) (k: kont) : (expr, env, kont) =
    case (c, e, k) of 
        | (Var i, e, k) => (lookup e i, e, k)
        | (App (e1, e2), e, k) => (e1, e, Arg (e2, e, k))
        | (Abs x, env, Arg (a, e, k)) => (a, e, Fn (x, env, k))
        | (Abs x, env, Fn (a, e, k)) => (a, extend e x, k),
        | (c, e, Mt) => (c, e, Mt)
        | (_, _, _) => (Var 0, Nil, Mt)
    end